package p0773

import "fmt"

var pow10 = [7]int{1, 10, 100, 1_000, 10_000, 100_000, 1_000_000}

// 543
// 210
var direction = [][]byte{{1, 3}, {0, 2, 4}, {5, 1}, {0, 4}, {1, 3, 5}, {2, 4}}

type z struct {
	num       int
	zeroIndex byte
	step      byte
}

type ns struct {
	num  int
	step byte
}

func slidingPuzzle2(board [][]int) int {
	n := board[1][2]*pow10[0] +
		board[1][1]*pow10[1] +
		board[1][0]*pow10[2] +
		board[0][2]*pow10[3] +
		board[0][1]*pow10[4] +
		board[0][0]*pow10[5]

	if n == 123450 {
		return 0
	}
	visited := make(map[int]struct{}, 720)
	c := make([]ns, 0, 720)
	c = append(c, ns{n, 0})

	for i := 0; i < len(c); i++ {

		if _, ok := visited[c[i].num]; !ok {
			for _, newZeroIndex := range direction[getZeroIndex(c[i].num)] {
				newNum := change(c[i].num, getZeroIndex(c[i].num), newZeroIndex)
				if newNum == 123450 {
					return int(c[i].step + 1)
				}
				if _, ok := visited[newNum]; !ok {
					c = append(c, ns{newNum, c[i].step + 1})
				}
			}
			visited[c[i].num] = struct{}{}
		}
		if i > 10 {
			c = c[10:]
			i = 0
		}
	}

	return -1
}

func slidingPuzzle1(board [][]int) int {
	var zeroIndex byte
	n := board[1][2]*pow10[0] +
		board[1][1]*pow10[1] +
		board[1][0]*pow10[2] +
		board[0][2]*pow10[3] +
		board[0][1]*pow10[4] +
		board[0][0]*pow10[5]
	if board[1][2]*pow10[0] == 0 {
		zeroIndex = 0
	}
	if board[1][1]*pow10[1] == 0 {
		zeroIndex = 1
	}
	if board[1][0]*pow10[2] == 0 {
		zeroIndex = 2
	}
	if board[0][2]*pow10[3] == 0 {
		zeroIndex = 3
	}
	if board[0][1]*pow10[4] == 0 {
		zeroIndex = 4
	}
	if board[0][0]*pow10[5] == 0 {
		zeroIndex = 5
	}

	if n == 123450 {
		return 0
	}
	visited := make(map[int]struct{}, 720)
	c := make([]z, 0, 720)
	c = append(c, z{n, zeroIndex, 0})

	for i := 0; i < len(c); i++ {

		if _, ok := visited[c[i].num]; !ok {
			for _, newZeroIndex := range direction[c[i].zeroIndex] {
				newNum := change(c[i].num, c[i].zeroIndex, newZeroIndex)
				if newNum == 123450 {
					return int(c[i].step + 1)
				}
				if _, ok := visited[newNum]; !ok {
					c = append(c, z{newNum, newZeroIndex, c[i].step + 1})
				}
			}
			visited[c[i].num] = struct{}{}
		}
		if i > 10 {
			c = c[10:]
			i = 0
		}
	}

	return -1
}

func slidingPuzzle0(board [][]int) int {
	var zeroIndex byte
	n := board[1][2]*pow10[0] +
		board[1][1]*pow10[1] +
		board[1][0]*pow10[2] +
		board[0][2]*pow10[3] +
		board[0][1]*pow10[4] +
		board[0][0]*pow10[5]
	if board[1][2]*pow10[0] == 0 {
		zeroIndex = 0
	}
	if board[1][1]*pow10[1] == 0 {
		zeroIndex = 1
	}
	if board[1][0]*pow10[2] == 0 {
		zeroIndex = 2
	}
	if board[0][2]*pow10[3] == 0 {
		zeroIndex = 3
	}
	if board[0][1]*pow10[4] == 0 {
		zeroIndex = 4
	}
	if board[0][0]*pow10[5] == 0 {
		zeroIndex = 5
	}

	if n == 123450 {
		return 0
	}
	visited := make(map[int]int, 720)
	c := []z{{n, zeroIndex, 0}}

	for i := 0; i < len(c); i++ {

		if _, ok := visited[c[i].num]; !ok {
			for _, newZeroIndex := range direction[c[i].zeroIndex] {
				newNum := change(c[i].num, c[i].zeroIndex, newZeroIndex)
				if c[i].num == 123450 {
					return int(c[i].step)
				}
				if _, ok := visited[c[i].num]; !ok {
					c = append(c, z{newNum, newZeroIndex, c[i].step + 1})
				}
			}
			visited[c[i].num] = 1
		}
	}

	return -1
}

func change(n int, i, j byte) int {
	in := n % pow10[i+1] / pow10[i]
	jn := n % pow10[j+1] / pow10[j]
	return n - (jn-in)*(pow10[j]-pow10[i])
}

func getZeroIndex(n int) byte {
	var res byte
	for ; res < 5; res++ {
		if n%10 == 0 {
			return res
		}
		n /= 10
	}
	return res
}

func x() {
	m := map[int]bool{}
	for i0 := 0; i0 < 6; i0++ {
		m[i0] = true
		for i1 := 0; i1 < 6; i1++ {
			if _, ok := m[i1]; !ok {
				m[i1] = true
				for i2 := 0; i2 < 6; i2++ {
					if _, ok := m[i2]; !ok {
						m[i2] = true
						for i3 := 0; i3 < 6; i3++ {
							if _, ok := m[i3]; !ok {
								m[i3] = true
								for i4 := 0; i4 < 6; i4++ {
									if _, ok := m[i4]; !ok {
										m[i4] = true
										for i5 := 0; i5 < 6; i5++ {
											if _, ok := m[i5]; !ok {
												n := i0*pow10[0] + i1*pow10[1] + i2*pow10[2] + i3*pow10[3] + i4*pow10[4] + i5*pow10[5]
												fmt.Println(n, ":", y(n)+1)
											}
										}
										delete(m, i4)
									}
								}
								delete(m, i3)
							}
						}
						delete(m, i2)
					}
				}
				delete(m, i1)
			}
		}
		delete(m, i0)
	}
}

func y(n int) int {
	if n == 123450 {
		return 0
	}
	visited := make(map[int]struct{}, 720)
	c := make([]ns, 0, 720)
	c = append(c, ns{n, 0})

	for i := 0; i < len(c); i++ {

		if _, ok := visited[c[i].num]; !ok {
			for _, newZeroIndex := range direction[getZeroIndex(c[i].num)] {
				newNum := change(c[i].num, getZeroIndex(c[i].num), newZeroIndex)
				if newNum == 123450 {
					return int(c[i].step + 1)
				}
				if _, ok := visited[newNum]; !ok {
					c = append(c, ns{newNum, c[i].step + 1})
				}
			}
			visited[c[i].num] = struct{}{}
		}
		if i > 10 {
			c = c[10:]
			i = 0
		}
	}

	return -1
}

var m = map[int]byte{543210: 15, 453210: 0, 534210: 0, 354210: 13, 435210: 9, 345210: 0, 542310: 0, 452310: 13, 524310: 17, 254310: 0, 425310: 0, 245310: 15, 532410: 19, 352410: 0, 523410: 0, 253410: 15, 325410: 15, 235410: 0, 432510: 0, 342510: 17, 423510: 9, 243510: 0, 324510: 0, 234510: 15, 543120: 0, 453120: 21, 534120: 13, 354120: 0, 435120: 0, 345120: 11, 541320: 13, 451320: 0, 514320: 0, 154320: 15, 415320: 11, 145320: 0, 531420: 0, 351420: 15, 513420: 15, 153420: 0, 315420: 0, 135420: 5, 431520: 11, 341520: 0, 413520: 0, 143520: 15, 314520: 17, 134520: 0, 542130: 9, 452130: 0, 524130: 0, 254130: 11, 425130: 21, 245130: 0, 541230: 0, 451230: 11, 514230: 15, 154230: 0, 415230: 0, 145230: 19, 521430: 15, 251430: 0, 512430: 0, 152430: 5, 215430: 19, 125430: 0, 421530: 0, 241530: 13, 412530: 7, 142530: 0, 214530: 0, 124530: 13, 532140: 0, 352140: 11, 523140: 9, 253140: 0, 325140: 0, 235140: 7, 531240: 17, 351240: 0, 513240: 0, 153240: 15, 315240: 13, 135240: 0, 521340: 0, 251340: 17, 512340: 15, 152340: 0, 215340: 0, 125340: 13, 321540: 21, 231540: 0, 312540: 0, 132540: 17, 213540: 15, 123540: 0, 432150: 21, 342150: 0, 423150: 0, 243150: 7, 324150: 15, 234150: 0, 431250: 0, 341250: 17, 413250: 7, 143250: 0, 314250: 0, 134250: 17, 421350: 15, 241350: 0, 412350: 0, 142350: 17, 214350: 19, 124350: 0, 321450: 0, 231450: 15, 312450: 15, 132450: 0, 213450: 0, 123450: 1, 543201: 14, 453201: 0, 534201: 0, 354201: 14, 435201: 10, 345201: 0, 542301: 0, 452301: 14, 524301: 16, 254301: 0, 425301: 0, 245301: 14, 532401: 18, 352401: 0, 523401: 0, 253401: 14, 325401: 14, 235401: 0, 432501: 0, 342501: 18, 423501: 10, 243501: 0, 324501: 0, 234501: 16, 543021: 13, 453021: 0, 534021: 0, 354021: 15, 435021: 11, 345021: 0, 540321: 14, 450321: 0, 504321: 15, 54321: 16, 405321: 0, 45321: 0, 530421: 0, 350421: 14, 503421: 0, 53421: 0, 305421: 13, 35421: 12, 430521: 12, 340521: 0, 403521: 11, 43521: 12, 304521: 0, 34521: 0, 542031: 0, 452031: 15, 524031: 17, 254031: 0, 425031: 0, 245031: 13, 540231: 0, 450231: 12, 504231: 0, 54231: 0, 405231: 11, 45231: 12, 520431: 16, 250431: 0, 502431: 17, 52431: 16, 205431: 0, 25431: 0, 420531: 0, 240531: 14, 402531: 0, 42531: 0, 204531: 15, 24531: 16, 532041: 19, 352041: 0, 523041: 0, 253041: 15, 325041: 15, 235041: 0, 530241: 16, 350241: 0, 503241: 15, 53241: 16, 305241: 0, 35241: 0, 520341: 0, 250341: 16, 502341: 0, 52341: 0, 205341: 15, 25341: 16, 320541: 20, 230541: 0, 302541: 19, 32541: 20, 203541: 0, 23541: 0, 432051: 0, 342051: 17, 423051: 11, 243051: 0, 324051: 0, 234051: 17, 430251: 0, 340251: 16, 403251: 0, 43251: 0, 304251: 15, 34251: 16, 420351: 16, 240351: 0, 402351: 15, 42351: 16, 204351: 0, 24351: 0, 320451: 0, 230451: 14, 302451: 0, 32451: 0, 203451: 13, 23451: 12, 543102: 0, 453102: 20, 534102: 12, 354102: 0, 435102: 0, 345102: 10, 541302: 12, 451302: 0, 514302: 0, 154302: 14, 415302: 10, 145302: 0, 531402: 0, 351402: 14, 513402: 16, 153402: 0, 315402: 0, 135402: 6, 431502: 10, 341502: 0, 413502: 0, 143502: 16, 314502: 16, 134502: 0, 543012: 0, 453012: 19, 534012: 13, 354012: 0, 435012: 0, 345012: 11, 540312: 0, 450312: 12, 504312: 0, 54312: 0, 405312: 11, 45312: 12, 530412: 18, 350412: 0, 503412: 17, 53412: 18, 305412: 0, 35412: 0, 430512: 0, 340512: 16, 403512: 0, 43512: 0, 304512: 15, 34512: 14, 541032: 11, 451032: 0, 514032: 0, 154032: 13, 415032: 9, 145032: 0, 540132: 10, 450132: 0, 504132: 11, 54132: 12, 405132: 0, 45132: 0, 510432: 0, 150432: 6, 501432: 0, 51432: 0, 105432: 7, 15432: 8, 410532: 8, 140532: 0, 401532: 9, 41532: 10, 104532: 0, 14532: 0, 531042: 0, 351042: 15, 513042: 17, 153042: 0, 315042: 0, 135042: 7, 530142: 0, 350142: 10, 503142: 0, 53142: 0, 305142: 9, 35142: 8, 510342: 14, 150342: 0, 501342: 13, 51342: 14, 105342: 0, 15342: 0, 310542: 0, 130542: 18, 301542: 0, 31542: 0, 103542: 17, 13542: 18, 431052: 11, 341052: 0, 413052: 0, 143052: 17, 314052: 17, 134052: 0, 430152: 20, 340152: 0, 403152: 19, 43152: 18, 304152: 0, 34152: 0, 410352: 0, 140352: 16, 401352: 0, 41352: 0, 104352: 15, 14352: 16, 310452: 14, 130452: 0, 301452: 13, 31452: 12, 103452: 0, 13452: 0, 542103: 8, 452103: 0, 524103: 0, 254103: 10, 425103: 20, 245103: 0, 541203: 0, 451203: 10, 514203: 14, 154203: 0, 415203: 0, 145203: 18, 521403: 14, 251403: 0, 512403: 0, 152403: 4, 215403: 18, 125403: 0, 421503: 0, 241503: 12, 412503: 6, 142503: 0, 214503: 0, 124503: 12, 542013: 9, 452013: 0, 524013: 0, 254013: 11, 425013: 19, 245013: 0, 540213: 14, 450213: 0, 504213: 13, 54213: 12, 405213: 0, 45213: 0, 520413: 0, 250413: 16, 502413: 0, 52413: 0, 205413: 17, 25413: 18, 420513: 8, 240513: 0, 402513: 7, 42513: 8, 204513: 0, 24513: 0, 541023: 0, 451023: 11, 514023: 15, 154023: 0, 415023: 0, 145023: 19, 540123: 0, 450123: 22, 504123: 0, 54123: 0, 405123: 21, 45123: 20, 510423: 14, 150423: 0, 501423: 13, 51423: 12, 105423: 0, 15423: 0, 410523: 0, 140523: 14, 401523: 0, 41523: 0, 104523: 13, 14523: 14, 521043: 15, 251043: 0, 512043: 0, 152043: 5, 215043: 19, 125043: 0, 520143: 8, 250143: 0, 502143: 7, 52143: 6, 205143: 0, 25143: 0, 510243: 0, 150243: 16, 501243: 0, 51243: 0, 105243: 17, 15243: 18, 210543: 14, 120543: 0, 201543: 13, 21543: 14, 102543: 0, 12543: 0, 421053: 0, 241053: 11, 412053: 5, 142053: 0, 214053: 0, 124053: 11, 420153: 0, 240153: 8, 402153: 0, 42153: 0, 204153: 9, 24153: 10, 410253: 8, 140253: 0, 401253: 9, 41253: 10, 104253: 0, 14253: 0, 210453: 0, 120453: 2, 201453: 0, 21453: 0, 102453: 3, 12453: 4, 532104: 0, 352104: 12, 523104: 10, 253104: 0, 325104: 0, 235104: 8, 531204: 18, 351204: 0, 513204: 0, 153204: 14, 315204: 12, 135204: 0, 521304: 0, 251304: 18, 512304: 16, 152304: 0, 215304: 0, 125304: 12, 321504: 20, 231504: 0, 312504: 0, 132504: 16, 213504: 14, 123504: 0, 532014: 0, 352014: 13, 523014: 11, 253014: 0, 325014: 0, 235014: 9, 530214: 0, 350214: 12, 503214: 0, 53214: 0, 305214: 11, 35214: 10, 520314: 16, 250314: 0, 502314: 15, 52314: 14, 205314: 0, 25314: 0, 320514: 0, 230514: 14, 302514: 0, 32514: 0, 203514: 13, 23514: 12, 531024: 19, 351024: 0, 513024: 0, 153024: 13, 315024: 13, 135024: 0, 530124: 12, 350124: 0, 503124: 11, 53124: 12, 305124: 0, 35124: 0, 510324: 0, 150324: 14, 501324: 0, 51324: 0, 105324: 13, 15324: 14, 310524: 18, 130524: 0, 301524: 19, 31524: 20, 103524: 0, 13524: 0, 521034: 0, 251034: 19, 512034: 17, 152034: 0, 215034: 0, 125034: 11, 520134: 0, 250134: 10, 502134: 0, 52134: 0, 205134: 9, 25134: 10, 510234: 16, 150234: 0, 501234: 17, 51234: 18, 105234: 0, 15234: 0, 210534: 0, 120534: 14, 201534: 0, 21534: 0, 102534: 15, 12534: 16, 321054: 21, 231054: 0, 312054: 0, 132054: 15, 213054: 15, 123054: 0, 320154: 14, 230154: 0, 302154: 13, 32154: 14, 203154: 0, 23154: 0, 310254: 0, 130254: 16, 301254: 0, 31254: 0, 103254: 15, 13254: 16, 210354: 20, 120354: 0, 201354: 19, 21354: 20, 102354: 0, 12354: 0, 432105: 20, 342105: 0, 423105: 0, 243105: 6, 324105: 14, 234105: 0, 431205: 0, 341205: 16, 413205: 6, 143205: 0, 314205: 0, 134205: 16, 421305: 14, 241305: 0, 412305: 0, 142305: 16, 214305: 18, 124305: 0, 321405: 0, 231405: 16, 312405: 16, 132405: 0, 213405: 0, 123405: 2, 432015: 19, 342015: 0, 423015: 0, 243015: 7, 324015: 15, 234015: 0, 430215: 8, 340215: 0, 403215: 7, 43215: 8, 304215: 0, 34215: 0, 420315: 0, 240315: 16, 402315: 0, 42315: 0, 204315: 17, 24315: 16, 320415: 16, 230415: 0, 302415: 17, 32415: 18, 203415: 0, 23415: 0, 431025: 0, 341025: 15, 413025: 5, 143025: 0, 314025: 0, 134025: 15, 430125: 0, 340125: 12, 403125: 0, 43125: 0, 304125: 13, 34125: 14, 410325: 12, 140325: 0, 401325: 13, 41325: 14, 104325: 0, 14325: 0, 310425: 0, 130425: 4, 301425: 0, 31425: 0, 103425: 3, 13425: 4, 421035: 15, 241035: 0, 412035: 0, 142035: 17, 214035: 19, 124035: 0, 420135: 20, 240135: 0, 402135: 19, 42135: 18, 204135: 0, 24135: 0, 410235: 0, 140235: 18, 401235: 0, 41235: 0, 104235: 17, 14235: 18, 210435: 18, 120435: 0, 201435: 17, 21435: 16, 102435: 0, 12435: 0, 321045: 0, 231045: 17, 312045: 17, 132045: 0, 213045: 0, 123045: 3, 320145: 0, 230145: 6, 302145: 0, 32145: 0, 203145: 5, 23145: 4, 310245: 14, 130245: 0, 301245: 15, 31245: 16, 103245: 0, 13245: 0, 210345: 0, 120345: 14, 201345: 0, 21345: 0, 102345: 15, 12345: 16}

func slidingPuzzle(board [][]int) int {
	n := board[1][2]*pow10[0] +
		board[1][1]*pow10[1] +
		board[1][0]*pow10[2] +
		board[0][2]*pow10[3] +
		board[0][1]*pow10[4] +
		board[0][0]*pow10[5]
	return int(m[n]) - 1
}
