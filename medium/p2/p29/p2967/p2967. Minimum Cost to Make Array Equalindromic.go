package main

import (
	"fmt"
	"math"
)

func isPalindrome(x int) bool {
	if x < 0 {
		return false
	}
	tmp := x
	ch := 0
	for tmp > 0 {
		ch = ch*10 + tmp%10
		tmp = tmp / 10
	}
	return ch == x
}

func generatePalindrome() int {
	9223372036854775807
	8999999999999999998
}

func minimumCost(nums []int) int64 {
	//return 27034634190
	//sort.Ints(nums)
	counter := 0
	sum := 0
	x := math.MaxInt64
	start := 0
	end := math.MaxInt64
	mid := start + (end-start)/2
	i := mid
	flg := 0
	for flg != 2 {
		if isPalindrome(i) {
			counter = 0
			sum = 0
			for _, n := range nums {
				a := n - i
				if a != 0 {
					counter++
					if a < 0 {
						sum -= a
					} else {
						sum += a
					}
				}
			}
			if x >= sum {
				fmt.Println(i, sum)
				x = sum
			} else {
				break
			}
			flg++
		}
		i++
	}
	if x < sum {
		fmt.Println("Left")
	} else {
		fmt.Println("Right")
	}

	//for i:=mid; !isPalindrome(i); i++{
	//	mid=i+1
	//}
	//for _, n := range nums {
	//	a := n - mid
	//	if a != 0 {
	//		counter++
	//		if a < 0 {
	//			sum -= a
	//		} else {
	//			sum += a
	//		}
	//	}
	//}
	//x=sum
	//for start<=end{
	//	mid:=start+(end-start)/2
	//	if isPalindrome(mid) {
	//		counter = 0
	//		sum = 0
	//		for _, n := range nums {
	//			a := n - mid
	//			if a != 0 {
	//				counter++
	//				if a < 0 {
	//					sum -= a
	//				} else {
	//					sum += a
	//				}
	//			}
	//		}
	//		if x >= sum {
	//			fmt.Println(mid, sum)
	//			x = sum
	//		} else {
	//			break
	//		}
	//	}
	//}
	return int64(x)
}

func main() {
	//nums := []int{1, 2, 3, 4, 5}
	//nums := []int{10, 12, 13, 14, 15}
	//nums := []int{22, 33, 22, 33, 22}
	//nums := []int{1}
	//nums := []int{102, 103, 105, 106, 109}
	//nums := []int{206, 215, 216, 219, 220, 221}
	//nums := []int{108680, 107109, 145757, 187403, 175630, 192452, 172074, 187194, 102859, 179846, 188177, 181334, 124070, 170103, 122199, 159920, 106558, 141518, 158301, 178576, 172591, 171980, 177657, 100999, 169985, 170642, 112430, 180195, 165805, 112356, 137970, 110403, 138296, 198464, 111610, 130710, 169362, 113002, 172729, 197373, 140442, 162319, 142538, 126720, 151436, 191054, 141828, 188025, 159559, 155333, 170118, 101975, 152987, 140504, 163775, 174149, 115414, 128857, 159297, 198725, 182482, 120372, 173806, 168899, 172544, 195741, 172199, 141201, 140642, 164246, 190805, 195875, 113639, 174160, 119872, 160937, 152158, 188652, 139521, 188742, 160450, 107024, 169500, 197098, 106197, 159895, 174609, 143470, 183071, 103264, 115752, 190920, 116301, 124139, 140208, 118394, 167450, 179487, 109006, 174033, 126641, 128591, 111679, 174823, 156084, 140889, 131372, 122111, 180756, 101162, 175418, 139155, 175654, 165865, 136911, 119730, 122425, 138103, 196402, 116528, 166683, 187030, 161165, 114437, 126716, 129762, 169148, 110405, 137016, 180755, 144456, 150734, 143367, 144073, 182603, 191277, 126264, 141453, 104055, 194807, 179715, 182895, 111334, 198300, 158762, 196257, 111516, 167392, 111584, 129218, 138310, 133142, 141482, 188430, 147836, 125734, 190064, 144663, 139770, 122445, 199283, 168213, 173176, 188486, 147825, 116119, 129400, 181680, 131289, 175910, 117794, 138980, 183906, 132805, 180337, 157512, 175995, 116871, 107090, 188832, 134067, 152506, 162136, 114022, 153036, 103960, 152488, 121563, 126682, 171233, 197299, 170810, 149085, 108896, 163418, 196784, 132452, 161926, 167872, 111809, 143668, 145540, 112646, 166187, 139596, 128949, 163684, 164744, 117345, 129335, 161186, 163548, 177434, 123457, 146369, 163456, 169321, 185364, 166556, 148786, 192391, 104014, 151989, 114068, 119535, 143886, 159121, 154975, 170186, 193586, 127841, 176713, 155934, 136968, 144636, 175246, 114993, 148231, 176699, 138947, 167019, 100137, 100439, 153868, 134995, 154956, 100107, 107700, 197463, 128019, 127884, 164768, 172472, 183875, 195720, 108588, 146420, 163322, 197000, 122800, 113754, 126634, 120890, 173032, 134631, 186006, 138146, 194051, 118908, 110347, 120397, 100094, 162064, 194926, 151478, 197807, 108516, 182104, 102941, 135770, 120817, 150410, 166812, 136562, 164400, 127217, 116294, 108266, 100598, 106539, 134566, 168212, 141288, 154604, 160793, 184376, 166080, 160756, 176879, 137585, 135513, 184239, 100183, 140886, 151685, 139268, 145353, 193106, 113071, 124042, 115205, 177201, 148459, 149811, 148924, 138980, 105541, 138990, 173533, 147461, 186328, 154434, 169217, 118910, 109101, 165039, 148761, 104597, 112958, 151275, 139873, 180655, 153538, 129945, 192691, 173604, 141250, 123736, 176778, 124625, 166862, 168968, 142503, 165560, 117629, 159832, 139602, 179167, 175085, 122387, 100316, 129028, 126515, 139471, 164944, 118737, 136121, 182954, 149240, 137003, 149758, 158438, 192252, 161724, 150335, 181714, 168798, 159587, 132975, 135278, 173765, 131211, 167919, 142129, 161662, 163911, 105018, 132193, 190290, 180229, 170213, 121415, 118864, 172774, 134714, 119625, 155991, 167185, 112651, 154980, 115257, 170726, 121519, 196567, 133435, 146827, 116556, 194838, 123479, 189856, 114369, 186104, 154490, 179430, 113051, 109714, 155873, 192500, 128552, 143128, 190588, 120232, 160990, 143472, 176194, 134360, 190613, 177386, 100049, 125502, 141341, 173803, 113913, 146840, 180178, 183075, 161087, 182418, 150830, 164866, 107864, 129782, 117287, 179600, 118729, 185338, 118832, 169206, 186832, 113796, 143509, 196628, 131134, 147149, 121603, 126406, 182725, 124472, 138417, 150878, 110225, 131166, 114420, 186180, 160665, 141065, 104636, 151582, 181394, 117853, 111124, 105459, 190033, 165852, 121226, 115686, 180385, 134164, 139185, 188560, 126894, 177914, 190687, 199344, 187115, 131082, 185924, 128661, 126470, 129966, 181196, 120884, 106404, 119375, 178759, 151892, 172883, 146154, 189970, 142208, 117500, 111456, 170811, 176026, 155965}
	nums := []int{5059505, 211313112, 309797903, 973454379, 514191415, 374999473, 520585025, 674898476, 713959317, 804676408, 310111013, 7521257, 896151698, 113353311, 198535891, 626545626, 862171268, 72744727, 9655569, 726020627, 153351, 646777646, 37999973, 424363424, 162555261, 9105019, 1328231, 615848516, 427191724, 946383649, 244282442, 301050103, 42133124, 629373926, 395676593, 3119113, 136090631, 306343603, 83611638, 724252427, 506595605, 205191502, 47466474, 96600669, 216242612, 636242636, 824373428, 9906099, 879606978, 101131101, 768313867, 113070311, 423727324, 296373692, 7183817, 730111037, 340818043, 368505863, 678636876, 520010025, 670939076, 337676733, 72244227, 953595359, 669474966, 50677605, 659666956, 482777284, 938464839, 544777445, 194737491, 687313786, 152989251, 159858951, 16522561, 767343767, 183777381, 167636761, 760414067, 815646518, 809414908, 950010059, 389030983, 2057502, 62726, 959353959, 102797201, 231636132, 292868292, 389343983, 471737174, 285818582, 474373474, 779515977, 5028205, 15351, 595171595, 122242221, 647636746, 900494009}
	//fmt.Println(nums)
	fmt.Println(math.MaxInt64)
	fmt.Println(minimumCost(nums))

	//fmt.Println("=======================")
	//var res []byte
	//for i := 0; i < 1000000000; i++ {
	//	if isPalindrome(i) {
	//		res = append(res, strconv.Itoa(i)...)
	//		res = append(res, "\n"...)
	//	}
	//}
	//os.WriteFile("filename", res, 0644)
}
